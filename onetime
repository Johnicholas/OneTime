#!/usr/bin/env python

__version__ = "2.0-beta"

__doc__ = """OneTime: an open source encoder/decoder that uses one-time pads.

(Run 'onetime --help' for usage information.)

The usual public-key encryption programs, such as GnuPG, are probably
secure for everyday purposes, but their implementations are too
complex for all but the most knowledgeable programmers to vet, and
in some cases there may be vulnerable steps in the supply chain
between GnuPG's authors and the end user.  When bootstrapping trust,
it helps to start with something you can trust by inspection.

Hence this script, OneTime, a simple encryption program that works
with one-time pads.  If you don't know what one-time pads are, this
program may not be right for you.  If you do know what they are and
how to use them, this program can make using them more convenient.

OneTime takes care of some of the pad-management bureacracy for you.
It avoids re-using pad data -- except when decrypting the same
encrypted message twice, of course -- by maintaining records of pad
usage in ~/.onetime/pad-records.  (The pads themselves are not stored
there, just records about pad usage.)  

Recommended practice: if you are Alice communicating with Bob, then
keep two different pads, 'alice_to_bob.pad' and 'bob_to_alice.pad', as
opposed to sharing the same pad and depending on OneTime's bookkeeping
to avoid pad range re-use.  With two separate pads, even if you each
send a message simultaneously to the other with no advance planning,
you still won't accidentally use any of the same pad data twice.

See http://en.wikipedia.org/wiki/One-time_pad for more information
about one-time pads in general.

OneTime is written by Karl Fogel and distributed under an MIT-style
open source license; run 'onetime --license' or see the LICENSE file
in the full distribution for complete licensing information.
OneTime's home page is http://www.red-bean.com/onetime/.
"""

import os
import sys
import stat
import getopt
import bz2
import base64
import hashlib
import re
import xml
import xml.dom
import xml.dom.minidom


# Set up booleans that older Pythons didn't have, if necessary.
try:
  True
except:
  True = 1
  False = 0

# The current format version.  
#
# The output format is only allowed to change when the major version
# number of OneTime increments.  A major version increment does not
# necessarily imply a format change, but in practice we probably
# wouldn't bump the major version number unless there were a format
# change, hence below we just compute the latter from the former.
#
# Format 1 was the format from the first release of OneTime through
# the very end of 2011.  It did not include the "Format:" header in
# output, and had a (rather embarrassing) bug whereby plaintext was
# encrypted and then then compressed, instead of the other way around.
#
# Format 2, introduced 2012-01-01, does include the "Format:" header
# in the human-readable portion of the output, and gets the
# compression/encryption order right.
Format = int(__version__.split(".")[0])

class Pad:
  """An encoder/decoder associated with a specific pad at a specific offset.
  Feed bytes through convert() to XOR them against the pad."""

  # Length of the front stretch of pad used for the ID, which is a
  # SHA1 of these bytes, which are then never used for encryption.
  # (And why 32, given that a SHA1 hash only holds 20 bytes anyway?
  # No reason, except the usual religious bias toward powers of 2.)
  id_source_length = 32

  def __init__(self, pad_path):
    """Initialize a new pad, using padfile PAD_PATH.  The pad cannot be
  used for encoding or decoding until set_offset() is called."""
    self.pad_path = pad_path
    self.padfile = open(self.pad_path)
    self.pad_size = os.stat(self.pad_path)[stat.ST_SIZE]
    self._offset = None  # where to start using pad bytes (must inititialize)
    self._length = 0  # number of pad bytes used this time
    self._id = None
    self._v1_id = None
    
  class PadShort(Exception):
    """Exception raised if Pad doesn't have enough data for this encryption."""
    pass

  class FormatVersion(Exception):
    """Exception raised if an unknown format version is specified."""
    pass

  def set_offset(self, offset):
    """Set this pad's encoding/decoding offset to OFFSET."""
    if offset >= self.pad_size:
      raise Pad.PadShort("offset exceeds pad size, need more pad")
    self._offset = offset
    self.padfile.seek(self._offset)

  def convert(self, string):
    """If STRING is not empty or None, return it as XORed against the pad;
else return the empty string.  Note STRING may be empty on intermediate
calls simply because a compressor has not yet had enough incoming data to
work with, not necessarily because input is ended yet."""
    string_len = len(string)
    pad_str = self.padfile.read(string_len)
    if len(pad_str) < string_len:
      raise Pad.PadShort("not enough pad data available to finish encryption")
    result = ''
    for i in range(string_len):
      result = result + chr(ord(string[i]) ^ ord(pad_str[i]))
    self._length += string_len
    return result

  def _get_id(self):
    """Get the ID for this pad."""
    saved_posn = self.padfile.tell()
    self.padfile.seek(0)
    sha1 = hashlib.sha1()
    string = self.padfile.read(Pad.id_source_length)
    sha1.update(string)
    self.padfile.seek(saved_posn)
    return sha1.hexdigest()

  def _get_v1_id(self):
    """Get the OneTime Version 1 ID for this pad.
    In OneTime format version 1, Pad IDs were based on the first 1024
    (octet) bytes of the pad.  This was needlessly spendy, or rather,
    it would have been needlessly spendy if version 1 of the program
    had been paranoid enough to not use any of those bytes for
    encryption.  Version 2 fixed this, reducing the number of bytes
    used on ID but also making they are not used for encryption."""
    saved_posn = self.padfile.tell()
    self.padfile.seek(0)
    sha1 = hashlib.sha1()
    string = self.padfile.read(1024)
    sha1.update(string)
    self.padfile.seek(saved_posn)
    return sha1.hexdigest()

  def id(self, version=2):
    """Return the pad's ID.
    If version is specified, return the ID according to that format version."""
    if version == 2:
      if self._id is None:
        self._id = self._get_id()
      return self._id
    elif version == 1:
      if self._v1_id is None:
        self._v1_id = self._get_v1_id()
      return self._v1_id
    else:
      raise Pad.FormatVersion("unknown format version %d for ID" % version)

  def path(self):
    """Return the pad's path."""
    return self.pad_path

  def offset(self):
    """Return offset from which encoding/decoding started."""
    return self._offset

  def length(self):
    """Return the number of pad bytes used so far."""
    return self._length

  def __str__(self):
    """Return a string representation of this pad."""
    return "Pad '%s' (%s):\n   Offset: %d\n   Length: %d\n" \
           % (self.path(), self.id(), self.offset(), self.length())

class PadEncoder:
  """Class for encoding raw data to OneTime output."""

  class UnknownCompressionException(Exception):
    """Exception raised when an unknown compression method is requested."""
    pass

  def __init__(self, pad, config):
    """Initialize an encoder for PAD with Configuration CONFIG."""
    self.pad = pad
    self.config = config
    # We use bz2 compression unconditionally.  If we offered a choice,
    # we'd have to name that choice somewhere for use in decryption.
    # But if we were to list the choice in the open headers, then we
    # would reveal something about the plaintext.  On the other hand,
    # if we were to name it in "inner headers" that are also masked by
    # the pad, that would complexify the code a great deal (we know
    # because we tried -- see the 2.x branch history) and that would
    # defeat part of the point of this program: to be so simple as to
    # be trivially auditable.  So just use bz2.  The worst case is ok.
    self.compressor = bz2.BZ2Compressor()

  def _output(self, string):
    "Return encoding of STRING, or the empty string if STRING is empty."
    if string:
      return base64.encodestring(string)
    else:
      return ''

  def encode(self, string):
    """Return onetime-encoded data for STRING, or the empty string if none.
    Consume pad as needed."""
    # Some thoughts on whether to inject random data into the ciphertext:
    #
    # In theory, on the first call to encode() we could inject a
    # random-length prefix of pseudo-random data, that would not be
    # compressed but just encoded against the pad.  (Even though it's
    # pseudo-random, we'd still need to encrypt it, to avoid revealing
    # anything about the system on which encryption took place.)
    #
    # One purpose of a random-length prefix would be to make it
    # unpredictable where the bz2 headers start (they are essentially
    # a known plaintext, though a very short one).  That way even if
    # the pad were a little bit less than random, we'd still have
    # removed even that tiny hint of a known-plaintext attack.  The
    # decoder would have to read the length (presumably stored in the
    # first few bytes of the prefix) and skip past the rest of the
    # random prefix to get to the start of the real ciphertext.
    #
    # But I'm reluctant to add features that compensate for bad pads.
    # It's not like we can make it safe in general to use bad pads, so
    # it feels cleaner not to go down that road at all, and not going
    # down that road keeps the code simpler.
    #
    # However, I'm open to other opinions.  Another argument in favor
    # of injecting some random noise into every message is that it
    # obscures the precise length of the plaintext.  Clearly we can't
    # hide the general length -- to do so would require gobbling up
    # a lot of pad, and we should treat pad as pretty valuable: it's
    # not just that is random data itself isn't entirely cheap, it's
    # that the value of pads comes partly from the difficulty involved
    # in conveying them to one's interlocutors.  We don't want to use
    # up pad unnecessarily, because we don't know how hard it will be
    # for the user(s) to re-exchange new pad data.
    #
    # Is it worthwhile to obscure the precise plaintext length?  I
    # don't really know.  It's a subtle thing to reason about.  The
    # shorter the plaintext, the greater proportional variance from
    # its true length we can achieve in the ciphertext.  But what you
    # end up with is a floor on the apparent length of messages: for
    # plaintexts that are near the maximum possible length of the
    # random prefix, the attacker knows only that the plaintext is
    # below a certain size... which is what the attacker knows anyway,
    # without any random prefix, it's just that we can increase that
    # maximum size.  Is that really worth it?
    #
    # One solution is to give the user options to control this -- in a
    # sense, options to specify the relative value of pad data versus
    # information about the plaintext length.  But that doesn't sound
    # like much of a usability win in practice.  So for now, we don't
    # do the random prefix thing.  Clear-eyed arguments welcome :-). 
    #
    # Also, users who are concerned about this can add their own noise
    # to the plaintext anyway, and are in a better position to
    # determine how much is needed (i.e., how much pad to spend on it).
    # That seems more in keeping with OneTime's general philosophy of
    # just providing a one-time pad system and assuming that users
    # know what they're doing.
    #
    # Regarding the bzip2 headers thing: known plaintext or not,
    # they should not be vulnerable to the kind of compression
    # attack for example described here:
    #
    #   http://security.stackexchange.com/questions/19911/\
    #   crime-how-to-beat-the-beast-successor/19914#19914
    #
    # One-time pads don't have that problem, for obvious reasons.
    out = self._output(self.pad.convert(self.compressor.compress(string)))
    self.config.record_consumed(self.pad, False)
    return out

  def finish(self):
    "Return last remaining bits of crypttext, or None if none left."
    last_bits = self._output(self.pad.convert(self.compressor.flush()))
    self.config.record_consumed(self.pad, False)
    return last_bits


class PadDecoder:
  """Class for decoding OneTime output back to plaintext."""

  class DecodingError(Exception):
    """Exception raised when something goes wrong decoding."""
    pass

  def __init__(self, pad, config, input_format):
    """Initialize a decoder for PAD with Configuration CONFIG.
    INPUT_FORMAT indicates the OneTime format version of the incoming
    data, i.e., the value given in the crypttext's 'Format: ' header."""
    self.pad = pad
    self.config = config
    self.unused_data = ""
    self.input_format = input_format
    self.decompressor = bz2.BZ2Decompressor()

    if self.input_format < 1:
      raise Pad.FormatVersion(
        "impossible format version: %d" % self.input_format)

    if self.input_format > 2:
      raise Pad.FormatVersion(
        "unrecognized format version: %d" % self.input_format)

  def decode(self, string):
    """Return all available onetime-decoded data so far, including for STRING,
    or return None if no decoded data is ready yet.  Throw IOError if
    data is not decodable.  Throw EOFError exception if called past
    the end of decodable data.  Store any unused data in self.unused_data."""
    ret = ""
    if self.input_format == 1:
      # Format 1 got the compression/encryption order wrong.  Look,
      # this is embarrassing.  I'm only telling you about it because
      # we still need to support that mis-ordering for compatibility.
      ret = self.pad.convert((self.decompressor.decompress(
        base64.b64decode(string))))
    else: # must be format 2
      ret = self.decompressor.decompress(self.pad.convert(
        base64.b64decode(string)))
    self.unused_data += self.decompressor.unused_data
    return ret

  def finalize(self):
    """Finalize pad usage with the configuration."""
    self.config.record_consumed(self.pad, True)


class Configuration:
  """A parsed representation of one user's ~/.onetime/ configuration area.
  A .onetime/ directory contains just a 'pad-records' file right now.

  Even in cases where we're operating without touching permanent
  storage, a Configuration instance is still created and updated
  internally.  This is partly because the Configuration does some
  consistency checks on incoming/outgoing data, and partly because it
  would be useful if we're ever providing an API.
  """

  class ConfigurationError(Exception):
    """Exception raised if we encounter an impossible state in a
    Configuration."""
    pass

  def __init__(self, path=None):
    """Initialize a new configuration.

    If PATH is None, try to find or create the config area in the
    standard location in the user's home directory; otherwise, find or
    create it at PATH.

    If PATH is \"-\", instantiate a Configuration object but do not
    connect it to any activity on disk; it will neither read from nor
    write to permanent storage."""

    self.config_area = path
    if self.config_area is None:
      self.config_area = os.path.join(os.path.expanduser("~"), ".onetime")
    self.pad_records_file = os.path.join(self.config_area, "pad-records")
    # Create the configuration area if necessary.
    if self.config_area != '-' and not os.path.isdir(self.config_area):
      # Legacy data check: if they have a ~/.otp dir, that's probably
      # from a previous incarnation of this program, when it was named
      # "otp".  If so, just rename the old config area.
      old_config_area = os.path.join(os.path.expanduser("~"), ".otp")
      old_pad_records_file = os.path.join(old_config_area, "pad-records")
      if os.path.isfile(old_pad_records_file):
        os.rename(old_config_area, self.config_area)
      else:
        os.mkdir(self.config_area)

    # Create the pad-records file if necessary.
    if self.config_area != '-' and not os.path.isfile(self.pad_records_file):
      open(self.pad_records_file, "w").close()
    # Parse the pad-records file (if any) in the configuration area.
    self.pad_records = self._parse_pad_records_file()
    
  def _consolidate_used_ranges(self, used, allow_reconsumption=False):
    """Return a consolidated version of USED.  USED is a list of
    tuples, indicating offsets and lengths:

       [ (OFFSET1, LENGTH1), (OFFSET2, LENGTH2), ... ]

    Consolidation means returning a list of equal or shorter length,
    that marks exactly the same ranges as used, but expressed in the
    most compact way possible.  For example:

       [ (0, 10), (10, 20), (20, 25) ]

    would become

       [ (0, 25) ]

    If ALLOW_RECONSUMPTION is False, raise a ConfigurationError
    exception if the input is incoherent, such as a range beginning
    inside another range.  But if ALLOW_RECONSUMPTION is True, allow
    ranges to overlap.  Typically, it will be False when encoding and
    True when decoding, because it's legitimate to decode a message
    multiple times, as long as no one re-uses that range for encoding."""
    new_used = [ ]
    last_offset = None
    last_length = None

    for tup in used:
      (this_offset, this_length) = tup
      if last_offset is not None:
        if last_offset + last_length >= this_offset:
          # It's only reconsumption if the end of the previous range
          # extends past the next offset.  So we error on that if
          # we're not allowing reconsumption...
          if (last_offset + last_length > this_offset
              and not allow_reconsumption):
            raise self.ConfigurationError(
              "pad's used ranges are incoherent:\n   %s" % str(used))
          # ...but otherwise we just extend the range from the
          # original offset, whether it was a true overlap or a
          # snuggle-right-up-against kind of thing:
          else:
            # All the possible cases are:
            #
            #   1) first tuple entirely precedes second
            #   2) second tuple begins inside first but ends after it
            #   3) second tuple begins and ends inside first
            #   4) second tuple begins *before* first and ends in it
            #   5) second tuple begins and ends before first
            #
            # However, due to the conditional above, we must be in (2)
            # or (3), and we only need to adjust last_length if (2).
            if (this_offset + this_length) > (last_offset + last_length):
              last_length = (this_offset - last_offset) + this_length
        else:
          new_used.append((last_offset, last_length))
          last_offset = this_offset
          last_length = this_length
      else:
        last_offset = this_offset
        last_length = this_length
    if last_offset is not None:
      new_used.append((last_offset, last_length))
    return new_used

  def _get_next_offset(self, used):
    """Return the next free offset from USED, which assumed to be in
    consolidated form.  The minimum returned is Pad.id_source_length;
    that way the Pad ID stretch is always accounted for, even if USED
    was initialized from an old v1 pad record."""
    cur_offset = None
    # We don't do anything fancy, just get the earliest available
    # offset past the last used tuple.  This means that any ranges in
    # between tuples are wasted.  See comment in main() about
    # discontinuous ranges for why this is okay.
    for tup in used:
      (this_offset, this_length) = tup
      cur_offset = this_offset + this_length
    if cur_offset is None or cur_offset < Pad.id_source_length:
      return Pad.id_source_length
    else:
      return cur_offset
    
  def _parse_pad_records_file(self):
    """Return a dictionary representing this configuration's 'pad-records'
    file (e.g., ~/.onetime/pad-records).  If the file is empty, just
    return an empty dictionary.

    The returned dictionary is keyed on pad IDs, with sub-dictionaries
    as values.  Each sub-dictionary's keys are the remaining element
    names inside a pad element, and the value of the 'used' element is
    a list of tuples, each tuple of the form (OFFSET, LENGTH).  So:

       returned_dict[SHA1_SUM] ==> subdict
       subdict['used'] ==> [(OFFSET1, LENGTH1), (OFFSET2, LENGTH2), ...]
       subdict['some_elt_name'] ==> SOME_ELT_VALUE       <!-- if any -->
       subdict['another_elt_name'] ==> ANOTHER_ELT_VALUE <!-- if any -->

    A 'pad-records' file is an XML document like this:

      <?xml version="1.0" encode="UTF-8"?>
      <!DOCTYPE TYPE_OF_DOC SYSTEM/PUBLIC "dtd-name">
      <onetime-pad-records>
         <pad-record>
           <id>SHA1_HASH_OF_FIRST_KILOBYTE_OF_PAD</id>
           <used><offset>OFFSET_A</offset>
                 <length>LENGTH_A</length></used>
           <used><offset>OFFSET_B</offset>
                 <length>LENGTH_B</length></used>
           ...
         </pad-record>
         <pad-record>
           <id>SHA1_HASH_OF_FIRST_KILOBYTE_OF_PAD</id>
           <used><offset>OFFSET_C</offset>
                 <length>LENGTH_C</length></used>
           ...
         </pad-record>
         ...
      </onetime-pad-records>
      """
    dict = { }

    if self.config_area == '-':
      return dict

    try:
      dom = xml.dom.minidom.parse(self.pad_records_file)

      for pad in dom.firstChild.childNodes:
        id = None
        path = None
        used = [ ]
        if pad.nodeType == xml.dom.Node.ELEMENT_NODE:
          subdict = { }
          for pad_part in pad.childNodes:
            if pad_part.nodeType == xml.dom.Node.ELEMENT_NODE:
              if pad_part.nodeName == "id":
                id = pad_part.childNodes[0].nodeValue
              elif pad_part.nodeName == "used":
                offset = None
                length = None
                for used_part in pad_part.childNodes:
                  if used_part.nodeName == "offset":
                    offset = int(used_part.childNodes[0].nodeValue)
                  if used_part.nodeName == "length":
                    length = int(used_part.childNodes[0].nodeValue)
                used.append((offset, length))
                subdict["used"] = self._consolidate_used_ranges(used)
              else:
                # Parse unknown elements transparently.
                subdict[pad_part.nodeName] = pad_part.childNodes[0].nodeValue
          if not subdict.has_key("used"):
            # We don't require the "used" element to be present; if it's
            # absent, it just means none of this pad has been used yet.
            subdict["used"] = [ (0, 0) ]
          dict[id] = subdict
    except xml.parsers.expat.ExpatError:
      pass
    return dict
    
  def save(self):
    """Save the pad-records file, and maybe commit it."""
    if self.config_area == '-':
      return
    tempfile = self.pad_records_file + ".tmp"
    fp = open(tempfile, 'w')
    fp.write("<onetime-pad-records>\n")
    for pad_id in self.pad_records.keys():
      fp.write("  <pad-record>\n")
      fp.write("    <id>%s</id>\n" % pad_id)
      for tuple in self._consolidate_used_ranges(
          self.pad_records[pad_id]["used"]):
        fp.write("    <used><offset>%d</offset>\n" % tuple[0])
        fp.write("          <length>%d</length></used>\n" % tuple[1])
      for key in self.pad_records[pad_id].keys():
        if key != "used":
          fp.write("    <%s>%s</%s>\n" % \
                   (key, self.pad_records[pad_id][key], key))
      fp.write("  </pad-record>\n")
    fp.write("</onetime-pad-records>\n")
    fp.close()
    os.rename(tempfile, self.pad_records_file)

  def register(self, pad):
    """Register PAD if it is not already registered, and set its
    offset based on previously used regions for that pad, if any."""
    next_offset = None
    # This is a little complicated only because we need; to look for
    # old v1-style pad IDs and upgrade them if present.
    if not self.pad_records.has_key(pad.id()):
      if self.pad_records.has_key(pad.id(version=1)):
        # Upgrade v1 record to v2.
        self.pad_records[pad.id()] = self.pad_records[pad.id(version=1)]
        del self.pad_records[pad.id(version=1)]
      else:
        # Initialize a new v2 record.
        self.pad_records[pad.id()] = { "used" : [ ] }
    else:
      if self.pad_records.has_key(pad.id(version=1)):
        raise Configuration.ConfigurationError(
          "Pad has both v2 and v1 IDs present in pad-records file:\n" \
          "  v2: %s\n"                                                \
          "  v1: %s\n"                                                \
          "This is supposed to be impossible.  Please resolve."       \
          % (pad.id(), pad.id(version=2)))
    # One way or another, we now have an up-to-date v2 pad record.
    # Set the next offset accordingly.
    next_offset = self._get_next_offset(self.pad_records[pad.id()]["used"])
    pad.set_offset(next_offset)

  def record_consumed(self, pad, allow_reconsumption):
    """Record that PAD has used PAD.length() bytes starting at PAD.offset().

    If ALLOW_RECONSUMPTION is False, raise a ConfigurationError
    if reconsuming any part of a range that has been consumed previously.
    But if ALLOW_RECONSUMPTION is True, allow ranges to overlap.
    Typically, it is be False when encoding and True when decoding,
    because it's okay to decode a message multiple times, but not to
    re-use a range for encoding."""
    used = self.pad_records[pad.id()]["used"]
    used.append((pad.offset(), pad.length()))
    self.pad_records[pad.id()]["used"] = self._consolidate_used_ranges(
      used, allow_reconsumption)
    pass

  def show_pad_records(self):
    """Print pad records, presumably for debugging."""
    for pad_id in self.pad_records.keys():
      print "Pad %s:" % pad_id
      print "  used:", self.pad_records[pad_id]["used"]


def license(outfile=sys.stdout):
  """Print open source license information to OUTFILE."""
  # Looks like we're maintaining this in parallel with the LICENSE
  # file.  I'd like to avoid that, but I don't see how.  The MIT
  # license text itself won't change, but the copyright years will
  # from time to time, and the copyright holder could as well.
  license_str = """\
OneTime version %s.

Copyright (c)  2004-2013  Karl Fogel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
""" % __version__
  outfile.write(license_str)


def usage(outfile=sys.stdout):
  """Print usage information to OUTFILE."""
  usage_str = """\
OneTime version %s, an open source encoder/decoder that uses one-time pads.

Typical usage:

  onetime -e -p PAD MSG           (encrypt; write output to 'MSG.onetime')
  onetime -d -p PAD MSG.onetime   (decrypt; output loses '.onetime' suffix)

Other usage modes:

  onetime [-e|-d] -p PAD -o OUTPUT INPUT  (both INPUT and OUTPUT are files)
  onetime [-e|-d] -p PAD -o - INPUT       (output goes to stdout)
  onetime [-e|-d] -p PAD                  (input from stdin, output to stdout)
  onetime [-e|-d] -p PAD -o OUTPUT        (input from stdin, output to OUTPUT)

OneTime remembers what ranges of what pad files have been used, and avoids
re-using those ranges when encoding, by keeping records in ~/.onetime/.

All options:

   -e                      Encrypt
   -d                      Decrypt
   -p PAD | --pad=PAD      Use PAD for pad data.
   -o OUT | --output=OUT   Output to file OUT ("-" for stdout)
   --offset=N              Control the pad data start offset
   -n | --no-trace         Leave no record of pad usage in your config
   -C DIR | --config=DIR   Specify DIR (instead of ~/.onetime) as config area;
                           '-' for DIR means use no config area (implies -n)
   --show-id               Show a pad's ID; used with -p only
   --intro                 Show an introduction to OneTime and one-time pads
   -v | -V | --version     Show version information
   --license               Show full open source license information
   -? | -h | --help        Show usage

""" % __version__
  outfile.write(usage_str)


def main():
  encrypting  = False
  decrypting  = False
  pad_file    = None
  incoming    = None
  output      = None
  output_name = None
  offset      = None
  config_area = None
  debug       = False
  error_exit  = False
  show_pad_id = False
  no_trace    = False

  try:
    opts, args = getopt.getopt(sys.argv[1:],
                               'edp:o:h?vVnC:',
                               [ "encrypt", "decrypt",
                                 "pad=",
                                 "output=",
                                 "offset=",
                                 "config=",
                                 "show-id",
                                 "no-trace",
                                 "debug",
                                 "intro", "help", "version", "license"])
  except getopt.GetoptError:
    sys.stderr.write("Error: problem processing options\n")
    usage(sys.stderr)
    sys.exit(1)

  for opt, value in opts:
    if opt == '--help' or opt == '-h' or opt == '-?':
      usage()
      sys.exit(0)
    if opt == '--intro':
      print __doc__,
      sys.exit(0)
    elif opt == '--version' or opt == '-v' or opt == '-V':
      print "OneTime version %s" % __version__
      sys.exit(0)
    elif opt == '--license':
      license()
      sys.exit(0)
    elif opt == '--encrypt' or opt == '-e':
      encrypting = True
    elif opt == '--decrypt' or opt == '-d':
      decrypting = True
    elif opt == '--pad' or opt == '-p':
      pad_file = value
    elif opt == '--output' or opt == '-o':
      if value == "-":
        output = sys.stdout
      else:
        output_name = value
        output = open(output_name, "w")
    elif opt == '--offset':
      offset = int(value)
    elif opt == '--config' or opt == '-C':
      config_area = value
    elif opt == '--show-id':
      show_pad_id = True
    elif opt == '--no-trace' or opt == '-n':
      no_trace = True
    elif opt == '--debug':
      debug = 1
    else:
      sys.stderr.write("Error: unrecognized option: '%s'\n" % opt)
      error_exit = True

  if show_pad_id:
    if encrypting or decrypting:
      sys.stderr.write("Error: cannot use --show-id with -e or -d.\n")
      error_exit = True
  elif not encrypting and not decrypting:
    sys.stderr.write("Error: must pass either '-e' or '-d'.\n")
    error_exit = True

  if encrypting and decrypting:
    sys.stderr.write("Error: cannot pass both '-e' and '-d'.\n")
    error_exit = True

  if not pad_file:
    sys.stderr.write("Error: must specify pad file with -p.\n")
    error_exit = True

  if len(args) == 0 or args[0] == "-":
    incoming = sys.stdin
    if output is None:
      # If incoming is stdin, output defaults to stdout.
      output = sys.stdout
  elif len(args) == 1:
    incoming = open(args[0])
    if output is None:
      if encrypting:
        # If plaintext input is 'FILENAME', output defaults to
        # 'FILENAME.onetime'.
        output_name = args[0] + ".onetime"
      else:
        # If crypttext input is 'FILENAME.onetime', output defaults to
        # 'FILENAME'.  But we also look for ".otp", for compatibility
        # with older versions of this program.
        if args[0].endswith(".onetime"):
          output_name = args[0][:-8]
        elif args[0].endswith(".otp"):
          output_name = args[0][:-4]
        else:
          sys.stderr.write(
            "Error: input filename does not end with '.onetime' or '.otp'.\n")
          error_exit = True
      output = open(output_name, "w")

  elif len(args) > 1:
    sys.stderr.write("Error: unexpected arguments: %s\n" % args[1:])
    error_exit = True

  if offset is not None and offset < Pad.id_source_length:
      sys.stderr.write("Error: argument to --offset must be >= %d\n"
                       % Pad.id_source_length)
      error_exit = True

  if error_exit:
    usage(sys.stderr)
    sys.exit(1)

  pad = Pad(pad_file)

  config = Configuration(config_area)
  config.register(pad)

  if show_pad_id:
    print pad.id()
    print "  Note that older versions of OneTime (v1 and before) " \
      + "would have reported"
    print "  %s.  This v1 ID output may go away" % pad.id(version=1)
    print "  in a future release, so please do not depend on its presence."
    sys.exit(0)

  if offset is not None:
    pad.set_offset(offset)
    offset = None  # junk this; we'll rely on pad for offset from now on

  # The first line of OneTime format 2 is the begin line.
  # Then comes the header: a group of lines followed by a blank line.
  # Then comes the encoded body.
  # The last line indicates the end, and is distinguishable from
  #   encoded content by inspection 
  onetime_begin = "-----BEGIN OneTime MESSAGE-----\n"
  old_onetime_begin = "-----BEGIN OTP MESSAGE-----\n"   # compat
  onetime_header = "%s" % onetime_begin                        \
               + "Format: %d  " % Format                       \
               + "   <<< NOTE: OneTime 1.x and older "         \
               +              "cannot read this format. >>>\n" \
               + "Pad ID: %s\n" % pad.id()                     \
               + "Offset: %s\n" % pad.offset()                 \
               + "\n"
  onetime_end = "-----END OneTime MESSAGE-----\n"
  old_onetime_end = "-----END OTP MESSAGE-----\n"       # compat

  # We could use pads more efficiently, by encoding with multiple
  # discontinuous ranges to avoid the "sparse wasted space" problem.
  # Instead of using a single 'Offset:' header at the beginning of the
  # message, we'd embed pad range metadata into the stream as we
  # encrypt.  That way we could use up free pad space no matter where
  # it's located:
  #
  #    -----BEGIN OneTime MESSAGE-----
  #    Format: 2
  #    Pad ID: de61f169bce003a1189b3e6ebb8ddfc0ef007ac2
  #    
  #    Offset 0:
  #     fvPh7od4icPXB0M1fcARXIHRGl8MMSrbKlc6dTjiT7cu/9gGiwwoPFyI0muM73G
  #     G6cLE9+gipcEnMIO+Ec6t1iO7KrjnHmD931nU1ko9wtVNjvUaaWjVZmjqQp5Hr9
  #     JT6m/oYsrMN10/1NcmknSlzVrxV0RQ3bNl4zAck/9LX0XuVFz1KKvOga02LtsQG
  #     q2RKyB63bLlbUQBeUL1OITMjhn+vblI2XItPMiPplexm8tBjPkhEffvBZSSK2RH
  #     zDBVeHgOkm3PVD2R+kW6WmZidW+W6n0WMMCrRtyFLZzYFjoctTx5fOe9216bJOI
  #     ndXEbwO13j43zHAd52pI3GddBaRVpkXBu2e2rzMLCGyVCvsihvpQyAXnubR62u9
  #    Offset 114:
  #     6Ftmk4uaNUojelW2weclXOyo9um5YBK+6cZXhOOnYVUgHvmHI/kz8WwxeTuJy0A
  #     il96oeP/Kk0uIfaGu81qYvPyBntEDdi8iKjs0kv2rj6F4mqjQUzfljId/UeOaTG
  #     a/W0l8ZD8eH+Wt+XH0tx57pFLZ8zzPj+KARuDK9XiRfkhrRseFIm2ylGmD3SY69
  #     yyGUDWYm3JGc0g+9b7AAWJy83xSJEywKGvs9RwhhSDz/Qe8610dJOLXLwyHGfwB
  #     mCXgYzi13sxYwYM1eYMg3xt/sot+w3V61ps1O7mnb+AA99k1Uxvwy4/8KZAKpAn
  #     AFPOnoL70mDoW9r8zxzWLA39Regfd3DChA8hNYd2zM6k72047pL50cKWwqsSoGQ
  #    Offset 570:
  #     gVL/aCtgYuXNph908Hk/rtdj1GUSLEzlxpBDgtYrj02m5oHLl64ZXs+VBQg2wtG
  #     qFSBj4zTQXQYrZPqYVqlAoQBGPZy110nbJWRq4clDx5LNiNeYEZAnqznXn2SO90
  #     AX+dllPISlrlca5gcK+KCUvJFPqe/KZ9WcjCJbi94GYFJdsxutLIaUQsZpc0+Pq
  #     UmO4VLD1ef8N6G8vrTUamDPc7+FBXZIUn0sEpJ6Al9jBRNxd56aiBkqwQe0Dboj
  #     d2Rxc56aVy7PS9yN1tcsuu/RwCDrOR/kGJ0CYU1G/XyTifUqQrPbzMdAgV8bBOg
  #    [...etc, etc...]
  #    -----END OneTime MESSAGE-----
  #
  # However, the common case is two people sharing a pad to exchange
  # messages serially, and in that case there is no benefit to using
  # this scheme, since they're already using the pad as efficiently as
  # possible.  IMHO, the extra complexity isn't worth the occasional
  # space-savings.  Random numbers aren't dirt cheap, but they're not
  # terribly expensive either.  Asking users to occasionally spend
  # extra pad bits for the sake of code simplicity seems reasonable.
  #
  # We can always add this format in the future, though.  If the
  # 'Offset:' line appears in the headers, then we're using the old
  # format, if not, then we're using the new format.

  if encrypting:
    output.write(onetime_header)
    encoder = PadEncoder(pad, config)
    while 1:
      string = incoming.read()
      if len(string) > 0:
        result = encoder.encode(string)
        if result:
          output.write(result)
      else:
        result = encoder.finish()
        if result:
          output.write(result)
        break
    output.write("\n")
    output.write(onetime_end)

  elif decrypting:
    decoder = None # Will set to a decoder when we know the incoming format.
    saw_end = None
    maybe_header_line = incoming.readline()
    if (maybe_header_line != onetime_begin
        and maybe_header_line != old_onetime_begin):
      sys.stderr.write("Error: malformed OneTime format: no begin line.\n")
      sys.exit(1)
    while maybe_header_line != "\n":
      maybe_header_line = incoming.readline()
      m = re.match("Offset: ([0-9]+)", maybe_header_line)
      if m:
        # Note we don't have to adjust the received offset here to
        # compensate for the 32-byte Pad ID stretch, because the
        # recorded offset in *both* format version 1 and version 2
        # ciphertexts is an absolute offset from the true edge of the
        # Pad.  The v2 Pad ID stretch is already reflected in the
        # offset for v2 files, but if an incoming ciphertext is v1,
        # then naturally we just use whatever offset it requests.
        #
        # (When the pad record is written back out, the 32 bytes for
        # the ID will be recorded as consumed no matter what, because
        # config.register() takes care of that.  But in practice, most
        # plaintexts will have already used more than that anyway, so
        # that safeguard is probably redundant here.)
        pad.set_offset(int(m.group(1)))
        continue
      m = re.match("Format: ([0-9]+) ", maybe_header_line)
      if m:
        format_number = int(m.group(1))
        decoder = PadDecoder(pad, config, format_number)
        continue

    if decoder is None:
      # If we saw no format, it must be the old format 1.
      decoder = PadDecoder(pad, config, 1)

    while 1:
      string = incoming.readline()
      if (string == onetime_end or string == old_onetime_end):
        saw_end = 1
        break
      if len(string) > 0:
        try:
          result = decoder.decode(string)
        except IOError:
          output.close()
          if output_name is not None:
            os.remove(output_name)
          raise PadDecoder.DecodingError("unable to decode (wrong pad?)")
        except EOFError:
          if string == "\n":
            # It's just the blank line between the end of the base64
            # data and the onetime_end marker.  Continue, because the
            # next thing we read should be the onetime_end marker.
            continue
          else:
            output.close()
            if output_name is not None:
              os.remove(output_name)
            raise PadDecoder.DecodingError(
              "unexpected input: '%s'" % string)
        if result:
          output.write(result)
      else:
        break
    decoder.finalize()
    if not saw_end:
      sys.stderr.write("Error: malformed OneTime format: no end line.\n")
      sys.exit(1)

  if (encrypting or decrypting) and not no_trace:
    config.save()

  if debug:
    config.show_pad_records()

if __name__ == '__main__':
  main()
