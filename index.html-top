<html>
<head>
<title>OneTime: An Encoder/Decoder Using The "One-Time Pad" Method</title>
</head>

<body text="#000000" bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">
<div id="content">

<div style="background: lightblue; font-style: italic;">
   <h2><center>OneTime: An Encoder/Decoder Using The "One-Time Pad" Method</center></h2>
</div>

<center><h3><a href="get.html"
        >Download OneTime version ONETIMEVERSION</a></h3></center>

<p><a href="onetime">OneTime</a> is
an <a href="http://www.opensource.org/" >open source</a>
encryption program that uses the <a
href="http://en.wikipedia.org/wiki/One-time_pad">one-time pad
algorithm</a> to allow two parties to communicate securely, without
worrying about <a
href="http://en.wikipedia.org/wiki/NSA_electronic_surveillance_program"
>unauthorized people listening in</a>.  OneTime has features to assist
with the bureaucracy of pad management and comes with built-in help.
It is written in the <a href="http://www.python.org/" >Python</a>
programming language and requires a Python interpreter to run.</p>

<p>In Debian GNU/Linux or Ubuntu, you can just use the package manager
to install the "<a href="http://packages.debian.org/sid/onetime"
>onetime</a>" package.  (But as of 24 July 2013, the version of
OneTime packaged in Debian and Ubuntu is a major version number behind
this upstream release; we'll try to get them updated soon!)</p>

<p>To use OneTime reliably, you need a source of good random data.  On
modern Unix systems, the <tt>/dev/random</tt> device is probably good
enough (I haven't done the math myself, I'm just taking other people's
word for it).  On non-Unix systems, you're on your own.  Whatever your
source of random data, store the data in a file (that's the "pad") and
point to it using OneTime's <tt>-p</tt> option when you encrypt; the
recipient must use the same pad to decrypt, of course.  Note that the
one-time pad method depends completely on the quality of the pad data;
if the pad is not truly random, the security of your messages cannot
be guaranteed.  Never encrypt different plaintexts with the same
stretch of pad&nbsp;&mdash;&nbsp;doing so could reveal some or all of
the used pad to eavesdroppers.  OneTime's default behavior is to always
avoid reusing pad data, unless you tell it otherwise.</p>

<p>When would you want to use a one-time pad system?</p>

<p>Not often, probably, given the difficulty of secure advance key
exchange!  But it might be handy in a few rare situations:</p>

<ul>
<li><p>You're not completely confident about the provenance of GnuPG
  on some system, but you are reasonably confident about its Python
  interpreter;</p></li>
<li><p>To bootstrap trust: i.e., to have a fallback method for
  exchanging other, more convenient keys (for example, if your GnuPG
  public key has changed, those who share a pad with you can get the
  new one via a method that is not dependent on any old public
  keys);</p></li>
<li><p>You feel the need for an encryption program whose source code
  is small and simple enough that you can inspect it and understand it
  yourself;</p></li>
<li><p>To throw a little diversity into the surveillance stream.
  Watchers have bots looking for &amp; saving messages in OpenPGP
  format and various other popular encryption formats.  OneTime makes
  'em work a little harder! :-)</p> </li>
</ul>

<p>Here is the output of '<b>onetime&nbsp;--intro</b>':</p>

<pre><i>